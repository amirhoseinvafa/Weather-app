{"version":3,"sources":["services/initialData/InitialData.js","view/WeatherData.js","services/GetWeatherIcon.js","api/WeatherApi.js","component/AlertApp.js","view/WeatherApp.js","App.js","reportWebVitals.js","index.js"],"names":["defaultStyle","transition","opacity","transitionStyles","entering","entered","exiting","exited","initialData","city","undefined","country","temp","temp_max","temp_min","description","cod","icon","Weather","data","isLoading","formData","inProp","useState","weatherIcon","setWeatherIcon","useEffect","rangeId","iconClass","getWeatherIcon","className","Spinner","style","width","height","color","Transition","in","timeout","state","WeatherApi","count","a","fetch","process","API_call","json","console","log","AlertApp","content","visible","setVisible","Alert","isOpen","toggle","WeatherForm","useForm","register","errors","handleSubmit","reset","setFormData","setIsLoading","apiData","setApiData","setInProp","callApi","name","sys","Math","floor","main","weather","id","message","Form","onSubmit","ref","type","placeholder","autoComplete","required","Button","size","disabled","onClick","WeatherData","App","WeatherApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5a70b3c.chunk.js","sourcesContent":["// Data for react-transition-group from WeatherApp.js\r\nexport const duration = 300;\r\n\r\nexport const defaultStyle = {\r\n  transition: `opacity ${duration}ms ease-in-out`,\r\n  opacity: 0,\r\n};\r\nexport const transitionStyles = {\r\n  entering: { opacity: 1 },\r\n  entered: { opacity: 1 },\r\n  exiting: { opacity: 0 },\r\n  exited: { opacity: 0 },\r\n};\r\n\r\n// Initial Data for setApiData from WeatherForm.js\r\nexport const initialData = {\r\n  city: undefined,\r\n  country: undefined,\r\n  temp: undefined,\r\n  temp_max: undefined,\r\n  temp_min: undefined,\r\n  description: undefined,\r\n  cod: undefined,\r\n  icon: undefined,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { getWeatherIcon } from \"services/GetWeatherIcon\";\r\nimport { Transition } from \"react-transition-group\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  duration,\r\n  defaultStyle,\r\n  transitionStyles,\r\n} from \"services/initialData/InitialData\";\r\nconst Weather = ({ data, isLoading, formData, inProp }) => {\r\n  const [weatherIcon, setWeatherIcon] = useState();\r\n\r\n  useEffect(() => {\r\n    setWeatherIcon(getWeatherIcon(data.icon));\r\n  }, [data.icon]);\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div className=\"d-flex justify-content-center  pt-3\">\r\n          <Spinner\r\n            style={{ width: \"1.5rem\", height: \"1.5rem\" }}\r\n            color=\"light\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Transition in={inProp} timeout={duration}>\r\n          {(state) => (\r\n            <div\r\n              style={{\r\n                ...defaultStyle,\r\n                ...transitionStyles[state],\r\n              }}\r\n            >\r\n              <div className=\"d-flex justify-content-center \">\r\n                <div className=\"p-4 box \">\r\n                  <h1 className=\"text-white text-center\">\r\n                    {formData.city !== \"\" && `${data.city} ,`} {data.country}\r\n                  </h1>\r\n                  <h5 className=\"py-4 text-white text-center\">\r\n                    <i className={`wi ${weatherIcon} display-2`}></i>\r\n                  </h5>\r\n                  <h1 className=\"text-center text-white font-weight-bold\">\r\n                    {data.temp}&deg;\r\n                  </h1>\r\n                  <div className=\"d-flex justify-content-around\">\r\n                    <h4 className=\"text-center  font-weight-bold max-temp\">\r\n                      {data.temp_max}&deg;\r\n                    </h4>\r\n                    <h4 className=\"text-center  font-weight-bold min-temp\">\r\n                      {data.temp_min}&deg;\r\n                    </h4>\r\n                  </div>\r\n                  <h3 className=\"text-white text-center pt-3\">\r\n                    {data.description}\r\n                  </h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Transition>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nWeather.propTypes = {\r\n  data: PropTypes.object,\r\n  isLoading: PropTypes.bool,\r\n  formData: PropTypes.object,\r\n  inProp: PropTypes.bool,\r\n};\r\n\r\nexport default Weather;\r\n","export const getWeatherIcon = (rangeId) => {\r\n  const iconClass = {\r\n    Thunderstorm: \"wi-thunderstorm\",\r\n    Drizzle: \"wi-sleet\",\r\n    Rain: \"wi-storm-showers\",\r\n    Snow: \"wi-snow\",\r\n    Atmosphere: \"wi-fog\",\r\n    Clear: \"wi-day-sunny\",\r\n    Clouds: \"wi-day-fog\",\r\n  };\r\n\r\n  switch (true) {\r\n    case rangeId >= 200 && rangeId <= 232:\r\n      return iconClass.Thunderstorm;\r\n\r\n    case rangeId >= 300 && rangeId <= 231:\r\n      return iconClass.Drizzle;\r\n\r\n    case rangeId >= 500 && rangeId <= 531:\r\n      return iconClass.Rain;\r\n\r\n    case rangeId >= 600 && rangeId <= 622:\r\n      return iconClass.Snow;\r\n\r\n    case rangeId >= 701 && rangeId <= 781:\r\n      return iconClass.Atmosphere;\r\n\r\n    case rangeId === 800:\r\n      return iconClass.Clear;\r\n\r\n    case rangeId >= 801 && rangeId <= 804:\r\n      return iconClass.Clouds;\r\n\r\n    default:\r\n      return iconClass.Clouds;\r\n  }\r\n};\r\n","const WeatherApi = async (city, count) => {\r\n  try {\r\n    const API_call = await fetch(\r\n      `${process.env.REACT_APP_URL}/data/2.5/weather?q=${city},${count}&appid=${process.env.REACT_APP_API_KEY}`\r\n    );\r\n\r\n    const data = await API_call.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default WeatherApi;\r\n","import React, { useState } from \"react\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nconst AlertApp = ({\r\n  content,\r\n  color = \"primary\",\r\n  className = \"fixed-bottom\",\r\n}) => {\r\n  const [visible, setVisible] = useState(true);\r\n\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Alert isOpen={visible} toggle={onDismiss} color={color}>\r\n        {content}\r\n      </Alert>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertApp;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Form } from \"reactstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport WeatherData from \"view/WeatherData\";\r\nimport WeatherApi from \"api/WeatherApi\";\r\nimport { initialData } from \"services/initialData/InitialData\";\r\nimport AlertApp from \"component/AlertApp\";\r\n\r\nconst WeatherForm = () => {\r\n  const { register, errors, handleSubmit, reset } = useForm();\r\n\r\n  const [formData, setFormData] = useState({ city: \"\", country: \"\" });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [apiData, setApiData] = useState(initialData);\r\n  const [inProp, setInProp] = useState(false);\r\n\r\n  useEffect(() => {\r\n    callApi();\r\n  }, [formData]);\r\n\r\n  const callApi = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await WeatherApi(formData.city, formData.country);\r\n      setApiData({\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        temp: Math.floor(data.main.temp - 273),\r\n        temp_max: Math.floor(data.main.temp_max - 273),\r\n        temp_min: Math.floor(data.main.temp_min - 273),\r\n        description: data.weather[0].description,\r\n        cod: data.cod,\r\n        icon: data.weather[0].id,\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    setFormData({ city: data.city, country: data.country });\r\n    reset();\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Form\r\n          onSubmit={handleSubmit(onSubmit)}\r\n          className=\" d-md-flex justify-content-md-center flex-wrap\"\r\n        >\r\n          <div className=\"d-flex justify-content-center\">\r\n            <input\r\n              ref={register}\r\n              type=\"text\"\r\n              name=\"city\"\r\n              placeholder=\"London\"\r\n              className=\"inputs\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"d-flex justify-content-center my-md-0 mx-md-3 my-2\">\r\n            <input\r\n              ref={register({ required: true })}\r\n              type=\"text\"\r\n              name=\"country\"\r\n              placeholder=\"GB\"\r\n              className=\"inputs\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"d-flex justify-content-center pt-3\">\r\n            <Button\r\n              color=\"info\"\r\n              size=\"sm\"\r\n              type=\"submit\"\r\n              disabled={isLoading ? true : false}\r\n              onClick={() => setInProp(true)}\r\n            >\r\n              Get Weather\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n      <div className=\"py-4 mb-4\">\r\n        {apiData.cod === 200 && (\r\n          <WeatherData\r\n            data={apiData}\r\n            isLoading={isLoading}\r\n            inProp={inProp}\r\n            formData={formData}\r\n          />\r\n        )}\r\n      </div>\r\n      <div>\r\n        {errors.country && <AlertApp content=\"Country is required !\" />}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherForm;\r\n","import \"./App.css\";\r\nimport WeatherApp from \"./view/WeatherApp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}